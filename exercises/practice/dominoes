import
  std / unittest

import
  dominoes

suite "dominoes tests":
  test "empty input = empty output":
    check canChain(newSeq[int]()) == true
  test "singleton input = singleton output":
    check canChain(@[@[1, 1]]) == true
  test "singleton that can\'t be chained":
    check canChain(@[@[1, 2]]) == false
  test "three elements":
    check canChain(@[@[1, 2], @[3, 1], @[2, 3]]) == true
  test "can reverse dominoes":
    check canChain(@[@[1, 2], @[1, 3], @[2, 3]]) == true
  test "can\'t be chained":
    check canChain(@[@[1, 2], @[4, 1], @[2, 3]]) == false
  test "disconnected - simple":
    check canChain(@[@[1, 1], @[2, 2]]) == false
  test "disconnected - double loop":
    check canChain(@[@[1, 2], @[2, 1], @[3, 4], @[4, 3]]) == false
  test "disconnected - single isolated":
    check canChain(@[@[1, 2], @[2, 3], @[3, 1], @[4, 4]]) == false
  test "need backtrack":
    check canChain(@[@[1, 2], @[2, 3], @[3, 1], @[2, 4], @[2, 4]]) == true
  test "separate loops":
    check canChain(@[@[1, 2], @[2, 3], @[3, 1], @[1, 1], @[2, 2], @[3, 3]]) ==
        true
  test "nine elements":
    check canChain(@[@[1, 2], @[5, 3], @[3, 1], @[1, 2], @[2, 4], @[1, 6],
                     @[2, 3], @[3, 4], @[5, 6]]) ==
        true
